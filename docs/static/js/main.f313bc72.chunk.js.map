{"version":3,"sources":["Header.js","Footer.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","isActive","isDropdownOpen","onClickNav","_this","setState","onClickDropdown","react_default","a","createElement","bloomer_min","href","this","onClick","React","Component","SiteFooter","id","Body","title","style","minHeight","width","height","src","frameborder","allow","allowfullscreen","App","className","src_Header","src_Body","Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAyCeA,6MArCbC,MAAQ,CAAEC,UAAU,EAAOC,gBAAgB,KAE3CC,WAAa,WACTC,EAAKC,SAAS,SAACL,GAAD,MAAY,CAAEC,UAAWD,EAAMC,eAGjDK,gBAAkB,WACdF,EAAKC,SAAS,SAACL,GAAD,MAAY,CAAEE,gBAAiBF,EAAME,2FAIrD,OACEK,EAAAC,EAAAC,cAACC,EAAA,OAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,YAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYC,KAAK,KAAjB,2BAGAJ,EAAAC,EAAAC,cAACC,EAAA,aAAD,CAAcT,SAAUW,KAAKZ,MAAMC,SAAUY,QAASD,KAAKT,cAE7DI,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYT,SAAUW,KAAKZ,MAAMC,SAAUY,QAASD,KAAKT,YACvDI,EAAAC,EAAAC,cAACC,EAAA,UAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYC,KAAK,4DAAjB,UAGAJ,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYC,KAAK,8BAAjB,WAGAJ,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYC,KAAK,0CAAjB,yBA5BSG,IAAMC,WCUZC,MAVf,WACE,OACAT,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQO,GAAG,UACTV,EAAAC,EAAAC,cAACC,EAAA,UAAD,gBACUH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,+BAAR,sBCiBCO,mLAnBX,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,UAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAAA,uWAEAF,EAAAC,EAAAC,cAAA,4LAINF,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAAA,UAAQU,MAAM,aAAaC,MAAO,CAACC,UAAW,SAAUC,MAAM,MAAMC,OAAO,MAAMC,IAAI,4CAA4CC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,aAdvOb,IAAMC,WCiBVa,mLAVX,OACErB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OACbtB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACuB,EAAD,cANUlB,IAAMC,WCIJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f313bc72.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, NavbarBurger, NavbarBrand, NavbarItem, NavbarMenu, NavbarEnd } from 'bloomer';\n\nclass Header extends React.Component {\n  state = { isActive: false, isDropdownOpen: false };\n\n  onClickNav = () => {\n      this.setState((state) => ({ isActive: !state.isActive }));\n  }\n\n  onClickDropdown = () => {\n      this.setState((state) => ({ isDropdownOpen: !state.isDropdownOpen }));\n  }\n\n  render() {\n    return (\n      <Navbar>\n        <NavbarBrand>\n          <NavbarItem href=\"/\">\n            Super Miner Battle Farm\n          </NavbarItem>\n          <NavbarBurger isActive={this.state.isActive} onClick={this.onClickNav}></NavbarBurger>\n        </NavbarBrand>\n        <NavbarMenu isActive={this.state.isActive} onClick={this.onClickNav}>\n          <NavbarEnd>\n            <NavbarItem href=\"https://www.facebook.com/pg/SuperMinerBattleFarm/events/\">\n              Events\n            </NavbarItem>\n            <NavbarItem href=\"https://discord.gg/ud6cAnU\">\n               Discord\n            </NavbarItem>\n            <NavbarItem href=\"https://smbf.challonge.com/tournaments\">\n              Tournaments\n            </NavbarItem>\n          </NavbarEnd>\n        </NavbarMenu>\n      </Navbar>\n    )\n  }\n}\n\nexport default Header\n","import React from 'react';\nimport { Footer, Container } from 'bloomer';\n\nfunction SiteFooter() {\n  return (\n  <Footer id='footer'>\n    <Container>\n      Made by <a href=\"https://ma.xprettyjohns.com\">Max Prettyjohns</a>\n    </Container>\n  </Footer>\n  );\n}\n\nexport default SiteFooter\n","import React from 'react';\nimport { Section, Content, Container } from 'bloomer'\n\nclass Body extends React.Component {\n  render () {\n    return (\n      <div>\n        <Section>\n          <Container>\n            <Content>\n              <p>Super Miner Battle Farm is a community of fighting game players based in South West England and Wales. We are a friendly and welcoming group of people with a good sense of humour and a desire to improve and support the offline scene in the UK. We host weekly sessions and monthly tournaments in Bristol, as well as other events in the Wales area.</p>\n\n              <p>If you're interested, please join our group page for more information on our events, tournaments we've gone to and any other fighting game news and videos our members post.</p>\n            </Content>\n          </Container>\n        </Section>\n        <Section>\n          <iframe title=\"ss18 embed\" style={{minHeight: \"315px\"}} width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VfCBDgEyAI0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        </Section>\n    </div>\n    )\n  }\n}\n\nexport default Body\n","import React from 'react';\nimport 'bulma'\nimport './App.css';\n\nimport Header from './Header.js';\nimport Footer from './Footer.js';\nimport Body from './Body.js';\n\nclass App extends React.Component {\n  render () { \n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <Body></Body>\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}